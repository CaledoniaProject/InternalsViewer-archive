<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SQL_Allocation_Units" xml:space="preserve">
    <value>SELECT o.object_id
	  ,iau.first_iam_page
      ,s.name AS schema_name
	  ,o.name AS table_name
      ,i.name AS index_name
	  ,is_ms_shipped AS system
      ,p.index_id
      ,i.type AS index_type
      ,iau.type AS allocation_unit_type
	  ,CASE iau.type
			WHEN 1 THEN 'Row Data'
			WHEN 2 THEN 'LOB Data'
			WHEN 3 THEN 'Row Overflow Data'
	   END AS type_description
      ,iau.used_pages
      ,iau.total_pages
FROM   sys.all_objects o
	   INNER JOIN sys.schemas s ON o.schema_id = s.schema_id 
	   INNER JOIN sys.partitions p ON p.object_id = o.object_id
       INNER JOIN sys.indexes i ON i.object_id = o.object_id AND i.index_id = p.index_id
	   INNER JOIN sys.system_internals_allocation_units iau ON iau.container_id = p.partition_id
ORDER BY is_ms_shipped desc, s.name asc , o.name asc</value>
  </data>
  <data name="SQL_Database_Tables" xml:space="preserve">
    <value>SELECT o.object_id
	  ,s.name AS schema_name
	  ,o.name AS table_name
	  ,is_ms_shipped AS system 
FROM   sys.objects o 
	   INNER JOIN sys.schemas s ON o.schema_id = s.schema_id 
WHERE  type IN ('U','S')
ORDER BY is_ms_shipped desc, s.name asc , o.name asc</value>
  </data>
  <data name="SQL_EntryPoints" xml:space="preserve">
    <value>SELECT DISTINCT first_page   
      ,root_page
      ,first_iam_page
      ,partition_number
FROM   sys.system_internals_allocation_units iau
       INNER JOIN sys.partitions p ON iau.container_id = p.partition_id
       INNER JOIN sys.indexes    i ON p.object_id = i.object_id
                                      AND
                                      i.index_id   = p.index_id
WHERE p.object_id = OBJECT_ID(@ObjectName) AND ISNULL(i.name, '') = @IndexName AND iau.type = 1
ORDER BY partition_number</value>
  </data>
  <data name="SQL_Files" xml:space="preserve">
    <value>CREATE TABLE #FileStats
            (file_id int
            ,filegroup int  
            ,total_extents int
            ,used_extents int 
            ,name sysname
            ,file_name nchar(520))
INSERT #FileStats EXEC ('dbcc showfilestats')
		
SELECT df.file_id
      ,df.type
      ,fg.name as filegroup_name
      ,df.name
      ,physical_name
      ,size
      ,total_extents
      ,used_extents
FROM   sys.database_files df
       INNER JOIN sys.filegroups fg ON df.data_space_id = fg.data_space_id
       INNER JOIN #FileStats fs ON df.file_id = fs.file_id
WHERE  df.type = 0

DROP TABLE #FileStats</value>
  </data>
  <data name="SQL_File_Size" xml:space="preserve">
    <value>SELECT size FROM sys.database_files WHERE file_id = @file_id</value>
  </data>
  <data name="SQL_ObjectHasClusteredIndex" xml:space="preserve">
    <value>SELECT ISNULL(OBJECTPROPERTY(OBJECT_ID(@TableName), 'TableHasClustIndex'), 0)</value>
  </data>
  <data name="SQL_Page" xml:space="preserve">
    <value>DBCC PAGE({0},{1},{2},{3}) WITH TABLERESULTS</value>
  </data>
  <data name="SQL_Table_Info" xml:space="preserve">
    <value>SELECT o.object_id
      ,s.name AS schema_name
      ,CASE WHEN i.name IS NULL 
            THEN o.name
            ELSE o.name + '.' + i.name 
       END AS object_name
      ,o.type AS object_type
      ,i.type_desc
      ,i.type AS index_type
      ,i.index_id AS index_id
      ,iau.first_iam_page
      ,iau.root_page
      ,iau.first_page
      ,iau.total_pages
      ,iau.used_pages
      ,iau.data_pages
      ,iau.type AS alloc_unit_type
      ,iau.type_desc
      ,partition_number
      ,COUNT(*) OVER(PARTITION BY i.index_id) AS partition_count
FROM   sys.system_internals_allocation_units iau
       INNER JOIN sys.partitions p ON iau.container_id = p.partition_id
       INNER JOIN sys.objects o ON p.object_id = o.object_id
       INNER JOIN sys.indexes i ON p.index_id = i.index_id AND i.object_id = p.object_id
       INNER JOIN sys.schemas s ON s.schema_id = o.schema_id
WHERE  p.object_id = @object_id
ORDER BY index_id, iau.type ASC</value>
  </data>
  <data name="SQL_Allocation_Unit" xml:space="preserve">
    <value>SELECT s.name+'.'+o.name AS Alloc_Unit
FROM   sys.allocation_units au
       INNER JOIN sys.partitions p ON au.container_id = p.partition_id
       INNER JOIN sys.objects o ON p.object_id = o.object_id
       INNER JOIN sys.schemas s ON s.schema_id = o.schema_id
WHERE  au.allocation_unit_id = @allocation_unit_id</value>
  </data>
  <data name="SQL_Checkpoint" xml:space="preserve">
    <value>CHECKPOINT</value>
  </data>
  <data name="SQL_Compression" xml:space="preserve">
    <value>SELECT ISNULL(data_compression, 0) FROM sys.partitions WHERE partition_id = @partition_id</value>
  </data>
  <data name="SQL_Databases" xml:space="preserve">
    <value>SELECT   d.database_id
	    ,d.name
        ,SUM(size) AS Size
        ,d.state 
	    ,COUNT(*) AS DataFiles
       ,d.compatibility_level
FROM     sys.databases d  
	     INNER JOIN sys.master_files mf ON d.database_id = mf.database_id 
WHERE    d.state = 0 AND type = 0
GROUP BY d.database_id
		,d.name
		,d.state 
        ,compatibility_level   
ORDER BY d.name</value>
  </data>
  <data name="SQL_Sysadmin_Check" xml:space="preserve">
    <value>SELECT CONVERT(BIT, IS_SRVROLEMEMBER('sysadmin'))</value>
  </data>
  <data name="SQL_Version" xml:space="preserve">
    <value>SELECT SERVERPROPERTY('productversion'), size FROM sysfiles WHERE fileid = 1</value>
  </data>
  <data name="SQL_Database" xml:space="preserve">
    <value>SELECT name FROM sys.databases WHERE state = 0 AND database_id = @database_id</value>
  </data>
  <data name="SQL_TransactionLog" xml:space="preserve">
    <value>SELECT [Current LSN] AS LSN
      ,REPLACE(SUBSTRING(Operation, 5, LEN(Operation)),'_',' ') AS Operation
      ,CASE WHEN Context = 'LCX_NULL' THEN NULL
      ELSE REPLACE(SUBSTRING(Context, 5, LEN(Context)),'_',' ') 
      END AS Context
      ,AllocUnitId
      ,AllocUnitName
      ,[Page ID] AS PageId
      ,[Slot ID] AS SlotId
      ,RowFlags
      ,[Num Elements] AS NumElements
      ,[Offset in Row] AS OffsetInRow
      ,[Rowbits First Bit] AS RowbitsFirstBit
      ,[Rowbits Bit Count] AS RowbitsBitCount
      ,[Rowbits Bit Value] AS RowbitsBitValue
      ,[Byte Offset] AS ByteOffset
      ,[New Value] AS NewValue
      ,[Old Value] AS OldValue
      ,[Description]
      ,[RowLog Contents 0] AS Contents0
      ,[RowLog Contents 1] AS Contents1
      ,[RowLog Contents 2] AS Contents2
      ,[RowLog Contents 3] AS Contents3
      ,[RowLog Contents 4] AS Contents4
      ,CONVERT(BIT,COALESCE(o.is_ms_shipped,1)) AS isSystem
      ,CONVERT(BIT,
        CASE WHEN Context IN ('LCX_GAM','LCX_SGAM', 'LCX_PFS','LCX_DIFF_MAP') 
            THEN 1
            ELSE 0
        END) AS isAllocation
FROM  ::fn_dblog(@begin,null) l
      LEFT JOIN sys.allocation_units au ON l.AllocUnitId = au.allocation_unit_id
      LEFT JOIN sys.partitions p ON p.partition_id = au.container_id
      LEFT JOIN sys.all_objects o ON p.object_id = o.object_id
WHERE Operation NOT LIKE '%XACT%' 
      AND 
      Operation NOT LIKE '%CKPT%'</value>
  </data>
  <data name="SQL_DatabaseId" xml:space="preserve">
    <value>SELECT DB_ID(@DatabaseName)</value>
  </data>
  <data name="SQL_Buffer_Pool" xml:space="preserve">
    <value>SELECT file_id
      ,page_id
      ,is_modified
      ,row_count
      ,free_space_in_bytes
FROM   sys.dm_os_buffer_descriptors WITH (NOLOCK)
WHERE  database_id = DB_ID(@database)</value>
  </data>
  <data name="SQL_Table_Columns_2005" xml:space="preserve">
    <value>SELECT CASE WHEN is_uniqueifier = 1 THEN 'Uniqueifier'
            WHEN is_dropped     = 1 THEN '(Dropped)'
            ELSE c.name END AS name,
       ISNULL(c.column_id,-1) AS column_id,
       TYPE_NAME(pc.system_type_id) as type_name,
       pc.system_type_id,
       pc.max_length,
       pc.precision,
       pc.scale,
       pc.leaf_offset,
       pc.is_uniqueifier,
       pc.is_dropped,
       pc.leaf_null_bit,
       CONVERT(BIT, 0) AS is_sparse
FROM   sys.allocation_units au
       INNER JOIN sys.partitions p ON au.container_id = p.partition_id
       INNER JOIN sys.system_internals_partition_columns pc ON p.partition_id = pc.partition_id
       INNER JOIN sys.all_objects o ON p.object_id = o.object_id
       LEFT JOIN sys.all_columns c ON column_id = partition_column_id AND c.object_id = p.object_id
WHERE  au.allocation_unit_id  = @allocation_unit_id</value>
  </data>
  <data name="SQL_Table_Columns_2008" xml:space="preserve">
    <value>SELECT CASE WHEN is_uniqueifier = 1 THEN 'Uniqueifier'
            WHEN is_dropped     = 1 THEN '(Dropped)'
            ELSE c.name END AS name,
       ISNULL(c.column_id,-1) AS column_id,
       TYPE_NAME(pc.system_type_id) as type_name,
       pc.system_type_id,
       pc.max_length,
       pc.precision,
       pc.scale,
       pc.leaf_offset,
       pc.is_uniqueifier,
       pc.is_dropped,
       ISNULL(c.is_sparse, 0) AS is_sparse,
       pc.leaf_null_bit
FROM   sys.allocation_units au
       INNER JOIN sys.partitions p ON au.container_id = p.partition_id
       INNER JOIN sys.system_internals_partition_columns pc ON p.partition_id = pc.partition_id
       INNER JOIN sys.all_objects o ON p.object_id = o.object_id
       LEFT JOIN sys.all_columns c ON column_id = partition_column_id AND c.object_id = p.object_id
WHERE  au.allocation_unit_id  = @allocation_unit_id</value>
  </data>
  <data name="SQL_CompatabilityLevel" xml:space="preserve">
    <value>SELECT compatibility_level FROM sys.databases WHERE name = @name</value>
  </data>
  <data name="SQL_Index_Columns" xml:space="preserve">
    <value>-- The reason this is necessary is that the key columns are in sys.system_internals_partition_columns
-- but there doesn''''t seem to be a link to which column they are. 
-- 
-- Let me know at danny@sqlinternalsviewer.com if you can think of a better way!
WITH IndexColumns AS
(
SELECT ipc.partition_column_id
	  ,i.type
      ,i.index_id
      ,p.object_id
      ,CASE WHEN is_uniqueifier = 1 THEN 'Uniqueifier' ELSE ac.name END AS name
      ,ipc.system_type_id
      ,ipc.max_length
      ,ipc.precision
      ,ipc.scale
      ,ipc.leaf_offset
      ,ipc.internal_offset
	  ,ic.index_column_id
	  ,ac.column_id
	  ,ic.is_included_column
	  ,i.is_unique
      ,ipc.internal_null_bit
      ,ipc.is_uniqueifier
from   sys.partitions p
       INNER JOIN sys.allocation_units au ON p.partition_id = au.container_id
       INNER JOIN sys.indexes i ON p.object_id = i.object_id
                                   AND
                                   p.index_id = i.index_id
       INNER JOIN sys.system_internals_partition_columns ipc ON p.partition_id = ipc.partition_id
       LEFT JOIN sys.index_columns ic ON ipc.partition_column_id = CASE WHEN i.index_id = 1 
                                                                        THEN ic.column_id
                                                                        ELSE ic.index_column_id 
                                                                   END
                                          AND
                                          ic.object_id = p.object_id    
                                          AND
                                          ic.index_id = p.index_id
       LEFT JOIN sys.all_columns ac ON ac.object_id = p.object_id 
                                          AND
                                          ac.column_id = ic.column_id
WHERE  au.allocation_unit_id = @allocation_unit_id
)
,KeyColumns AS
(
SELECT ROW_NUMBER() OVER(ORDER BY ipc.key_ordinal) AS RowId
      ,CASE WHEN ipc.is_uniqueifier = 1 THEN 'Uniqueifier'
            WHEN ipc.is_dropped = 1     THEN 'Dropped'
            ELSE ac.name END AS [name] 
      ,p.partition_id
      ,ac.column_id
      ,ipc.is_uniqueifier
      ,ipc.is_dropped
from   sys.partitions p
       INNER JOIN sys.allocation_units au ON p.partition_id = au.container_id
       INNER JOIN sys.indexes i ON p.object_id = i.object_id
                                   AND
                                   p.index_id = i.index_id
       INNER JOIN sys.system_internals_partition_columns ipc ON p.partition_id = ipc.partition_id
       LEFT JOIN  sys.all_columns ac ON ipc.partition_column_id = ac.column_id 
                                        AND
                                        p.object_id = ac.object_id
WHERE  au.allocation_unit_id = @allocation_unit_id
       AND ipc.key_ordinal &gt;= 1
       AND NOT EXISTS (SELECT * FROM IndexColumns ic WHERE ic.name = ac.name)
       AND ipc.is_uniqueifier != 1
)
,MaxIndexColumn AS
(
SELECT MAX(partition_column_id) AS ColumnId FROM IndexColumns WHERE [name] IS NOT NULL
)
SELECT type
      ,ISNULL(ic.name, kc.name) AS name
      ,TYPE_NAME(system_type_id) as type_name
      ,system_type_id
      ,max_length
      ,precision
      ,scale
      ,leaf_offset
      ,internal_offset
      ,index_id
      ,CASE WHEN index_id = 1 THEN internal_offset ELSE leaf_offset END AS offset
      ,ISNULL(ISNULL(index_column_id, kc.RowId + ColumnId),0) AS index_column_id
      ,ISNULL(ISNULL(ic.column_id, kc.column_id),-1) AS column_id
      ,ISNULL(is_included_column,0) AS is_included_column
      ,is_unique
      ,ISNULL(OBJECTPROPERTY(object_id,'TableHasClustIndex'),0) AS hasClusteredIndex
      ,CONVERT(BIT,CASE WHEN kc.is_uniqueifier = 1 OR ic.is_uniqueifier =1 THEN 1 ELSE 0 END) AS is_uniqueifier
      ,ISNULL(is_dropped,0) AS is_dropped
      ,CONVERT(BIT, CASE WHEN ic.name IS NULL THEN 1 ELSE 0 END) AS IsKey
      ,internal_null_bit
FROM   IndexColumns ic
       CROSS JOIN MaxIndexColumn m
       LEFT JOIN KeyColumns kc ON kc.RowId + ColumnId = ic.partition_column_id
WHERE  ISNULL(ic.name, kc.name) IS NOT NULL</value>
  </data>
</root>